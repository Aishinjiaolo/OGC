OGC
Initial of /Original Geometry Computation/

For segment based geometry learning,
it will keep updating.


+-----------------------------------------+
|          Currently Containing           |
+-----------------------------------------+

source code: (./src/)
'point'   => point.cpp   point.h
'segment' => segment.cpp segment.h
'polygon' => polygon.cpp polygon.h
'api'     => api.cpp     api.h

unit test: (./test/)
'point'   => point_unittest.cc
'segment' => segment_unittest.cc
'polygon' => polygon_unittest.cc

swig interface: (./swig/)
'point'   => point.i
'segment' => segment.i
'polygon' => polygon.i
'api'     => api.i

usage demo: (./)
c++    usage flow => main.cpp
python usage flow => run.py
auto make         => Makefile
instruction       => README


+-----------------------------------------+
|             C++ Utility                 |
+-----------------------------------------+

To make all:
  ./make

To make library only:
  ./make lib

To run:
  ./run

To clean:
  ./make clean


+-----------------------------------------+
|            Unit Test Utility            |
+-----------------------------------------+

Unit test is run under google test framework.

1. Please go to: http://code.google.com/p/googletest/
   and download the latest version of gtest.
   (currently, I am using version 1.6.0)
2. Put gtest wherever you like.
3. Edit Makefile, and modify 'TEST_DIR' to your gtest dir.
4. Put every unit test file(*.cc) in ./test/

To make unit test:
  ./make gtest

To run unit test:
  ./unittest

To clean unit test:
  ./make tclean

Some unit test's been put in ./test/ for your reference.


+-----------------------------------------+
|             Python Extension            |
+-----------------------------------------+

Python extensions in c++ is supportted by SWIG wrapping

1. Please go to: http://www.swig.org/
   and download the install latest version of SWIG.
   (currently, I am using version 2.0.4)
2. You may modify the run.py in current directory which is
   supposed to import the c++ module.
3. You may write out GDSII files to validate your geometry
   in this python flow.
4. GDSII module is from http://sourceforge.net/projects/gdspy/

To make python extension module:
  ./make pyswig

To run python script:
  ./run.py

To clean python extension module:
  ./make pyclean

A sample GDSII file: sample.gds will be generated in current directory.

